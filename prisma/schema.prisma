generator client {
  provider = "prisma-client-js"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../public/docs"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Account {
  id                                     String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                  String           @unique
  institute                              String
  created_at                             DateTime         @default(now()) @db.Timestamptz(6)
  password                               String?
  institute_account_instituteToinstitute Institute        @relation("account_instituteToinstitute", fields: [institute], references: [name], onDelete: NoAction, onUpdate: NoAction, map: "account_fk2")
  admins                                 Admins[]
  profile                                Profile?
  routine_changes                        RoutineChanges[]

  @@map("account")
}

model Analytics {
  user_id   String  @id @db.Uuid
  device    String?
  fcm_token String?
  profile   Profile @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("analytics")
}

model Clubs {
  id                                   String    @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                 String
  type                                 String
  field                                String
  image                                String?
  coordinator                          String?   @db.Uuid
  cocoordinator                        String?   @db.Uuid
  institute                            String
  members                              Int       @default(0) @db.SmallInt
  profile_clubs_coordinatorToprofile   Profile?  @relation("clubs_coordinatorToprofile", fields: [coordinator], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "clubs_fk5")
  profile_clubs_cocoordinatorToprofile Profile?  @relation("clubs_cocoordinatorToprofile", fields: [cocoordinator], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "clubs_fk6")
  institute_clubs_instituteToinstitute Institute @relation("clubs_instituteToinstitute", fields: [institute], references: [name], onDelete: NoAction, onUpdate: NoAction, map: "clubs_fk7")

  @@map("clubs")
}

model Courses {
  id                                     String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  institute                              String
  course_code                            String
  course_title                           String
  theory                                 Boolean
  lab                                    Boolean
  type                                   String
  credits                                Int       @db.SmallInt
  semester                               Int       @db.SmallInt
  branch                                 String
  drive_link                             String?
  institute_courses_instituteToinstitute Institute @relation("courses_instituteToinstitute", fields: [institute], references: [name], onDelete: NoAction, onUpdate: NoAction, map: "courses_fk1")
  routine                                Routine[]

  @@map("courses")
}

model Institute {
  id                                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                 String    @unique
  full_name                            String    @unique
  domain                               String    @unique
  account_account_instituteToinstitute Account[] @relation("account_instituteToinstitute")
  clubs_clubs_instituteToinstitute     Clubs[]   @relation("clubs_instituteToinstitute")
  courses_courses_instituteToinstitute Courses[] @relation("courses_instituteToinstitute")
  mess_mess_instituteToinstitute       Mess[]    @relation("mess_instituteToinstitute")
  profile_profile_instituteToinstitute Profile[] @relation("profile_instituteToinstitute")
  routine_routine_instituteToinstitute Routine[] @relation("routine_instituteToinstitute")

  @@map("institute")
}

model Mess {
  id                                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  mess_no                             Int       @db.SmallInt
  day                                 Int       @db.SmallInt
  breakfast                           String
  lunch                               String
  dinner                              String
  institute                           String
  institute_mess_instituteToinstitute Institute @relation("mess_instituteToinstitute", fields: [institute], references: [name], onDelete: NoAction, onUpdate: NoAction, map: "mess_fk5")

  @@map("mess")
}

model Profile {
  id                                     String     @id @db.Uuid
  username                               String?    @unique
  full_name                              String?
  image                                  String?
  semester                               Int        @db.SmallInt
  branch                                 String
  group                                  String?    @default("")
  programme                              String
  year                                   Int        @db.SmallInt
  institute                              String
  visibility                             Boolean    @default(true)
  mess                                   Int?       @db.SmallInt
  electives                              String[]   @default([])
  analytics                              Analytics?
  clubs_clubs_coordinatorToprofile       Clubs[]    @relation("clubs_coordinatorToprofile")
  clubs_clubs_cocoordinatorToprofile     Clubs[]    @relation("clubs_cocoordinatorToprofile")
  institute_profile_instituteToinstitute Institute  @relation("profile_instituteToinstitute", fields: [institute], references: [name], onDelete: NoAction, onUpdate: NoAction, map: "profile_fk9")
  account                                Account    @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("profile")
}

model Routine {
  id                                     String           @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  course_id                              String           @db.Uuid
  course_code                            String
  course_title                           String
  prof                                   String
  type                                   String           @default("'THEORY'::text")
  day                                    Int              @db.SmallInt
  from                                   DateTime         @db.Time(6)
  to                                     DateTime         @db.Time(6)
  group                                  String           @default("")
  branch                                 String
  institute                              String
  room                                   String
  semester                               Int              @db.SmallInt
  compulsory                             Boolean          @default(true)
  courses                                Courses          @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  institute_routine_instituteToinstitute Institute        @relation("routine_instituteToinstitute", fields: [institute], references: [name], onDelete: NoAction, onUpdate: NoAction)
  routine_changes                        RoutineChanges[]

  @@map("routine")
}

model RoutineChanges {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  created_by  String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date        DateTime @db.Date
  description String?
  routine_id  String   @db.Uuid
  account     Account  @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction)
  routine     Routine  @relation(fields: [routine_id], references: [id], onDelete: Cascade)

  @@map("routine_changes")
}

model Admins {
  id      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id String  @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  route   String?
  account Account @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("admins")
}
